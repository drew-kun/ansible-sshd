---
# SIGN USER PUBLIC KEYS
#======= priv keys check start =======
#sshd_user_uniq_keys
- name: "[CA_User] Get list of uniqe ssh keys for all users to be signed with User CA"
  set_fact:
    sshd_user_uniq_keys: "{{ sshd_users|map(attribute='keypath')|list|unique }}"  # LIST OF UNIQ KEYS
    with_items: "{{ sshd_users }}"
  no_log: yes

#- debug: msg="{{ sshd_user_uniq_keys }}"

- name: "[CA_User] Locally check if user private keys already exist"
  stat: path="{{ item }}"
  register: sshd_user_keys
  with_items: "{{ sshd_user_uniq_keys }}"
  delegate_to: localhost

- name: "[CA_User] Combine the results into dictionary with following structure: {<user_key> : <stat.exists>"
  set_fact:
    sshd_user_keys_exist: "{{ sshd_user_keys_exist|default({}) | combine( {item.item: item.stat.exists} ) }}"
  with_items: "{{ sshd_user_keys.results }}"
  no_log: yes

- debug:
    msg: "sshd_user_keys_exist: {{ sshd_user_keys_exist }}"

- name: "[CA_User] Locally generate user key pairs if any private keys do not exist"
  command: ssh-keygen -o -a 100 -t {{ sshd_algo }} -q -N "" -f {{ item.key }}
  #shell: echo "y" | ssh-keygen -o -a 100 -t {{ sshd_algo }} -q -N "" -f /tmp/ssh_host_{{ sshd_algo }}_key
  delegate_to: localhost
  #become: yes
  #become_user:
  with_dict: "{{ sshd_user_keys_exist }}"
  when:
    - false in sshd_user_keys_exist.values() # Do this task only if any private keys do not exist
    - not item.value  # Create specific key pair only if private key doesn't exist
#======= priv keys check end =======

#====== pub keys check start =======
# IF it is necessary to dynamically create a variable containing specific data:
# https://stackoverflow.com/questions/29399581/using-set-facts-and-with-items-together-in-ansible#29817564
- name: "[CA_User] Create public key list setp 1: setting facts"
  set_fact:
    sshd_usr_k_item: "{{ item }}.pub"
  register: sshd_usr_k_result
  with_items: "{{ sshd_user_uniq_keys }}"

- name: "[CA_User] Create public key list setp 2: mapping facts to variable list"
  set_fact:
    sshd_user_uniq_keys_pub:
      "{{ sshd_usr_k_result.results | map(attribute='ansible_facts.sshd_usr_k_item') | list }}"
# This two actions are necessary because if the item does not exist, then results doesnt contain the 'path' key

#- debug: msg="{{ sshd_user_uniq_keys_pub }}"

- name: "[CA_User] Locally check if user pub keys already exist"
  stat: path="{{ item }}"
  register: sshd_user_keys_pub
  with_items: "{{ sshd_user_uniq_keys_pub }}"
  delegate_to: localhost
  when: true in sshd_user_keys_exist.values() # if no private keys exist, then they were generated with public keys

- name: "[CA_User] Create the list of dictionaries with following structure: { priv_key: value, pub_key: value, pub_exists: boolean }"
  set_fact:
    sshd_user_keys_pub_retrieve:
      "{{ sshd_user_keys_pub_retrieve|default([]) + [{ 'priv_key': item[0], 'pub_key': item[1].item, 'pub_exists': item[1].stat.exists }] }}"
  with_together:
    - "{{ sshd_user_uniq_keys }}"
    - "{{ sshd_user_keys_pub.results }}"
  no_log: yes
  when: true in sshd_user_keys_exist.values()

#- debug: msg="{{ sshd_user_keys_pub_retrieve }}"

- name: "[CA_User] Retrieve public key form private if pub key file doesn't exist"
  shell: "ssh-keygen -y -f {{ item.priv_key }} > {{ item.pub_key }}"
  with_items: "{{ sshd_user_keys_pub_retrieve }}"
  delegate_to: localhost
  when:
    - true in sshd_user_keys_exist.values()
    - not item.pub_exists
#====== pub keys check start =======

#===== certificate check start =====
- name: "[CA_User] Create list of certificates setp 1: setting facts"
  set_fact:
    sshd_usr_c_item: "{{ item }}-cert.pub"
  register: sshd_usr_c_result
  with_items: "{{ sshd_user_uniq_keys }}"

- name: "[CA_User] Create list list of certificates setp 2: mapping facts to variable list"
  set_fact:
    sshd_user_uniq_certs:
      "{{ sshd_usr_c_result.results | map(attribute='ansible_facts.sshd_usr_c_item') | list }}"
# This two actions are necessary because if the item does not exist, then results doesnt contain the 'path' key

#- debug: msg="{{ sshd_user_uniq_certs }}"

- name: "[CA_User] Locally check if user certificates already exist"
  stat: path="{{ item }}"
  register: sshd_user_certs
  with_items: "{{ sshd_user_uniq_certs }}"
  delegate_to: localhost

- name: "[CA_User] Combine the results into dictionary with following structure: { pub_key: value, cert: value, cert_exists: boolean }"
  set_fact:
    sshd_user_certs_exist:
     "{{ sshd_user_certs_exist|default([]) + [{ 'pub_key': item[0], 'cert': item[1].item, 'cert_exists': item[1].stat.exists }] }}"
  with_together:
    - "{{ sshd_user_uniq_keys_pub }}"
    - "{{ sshd_user_certs.results }}"
  no_log: yes

#- debug: msg="{{ sshd_user_certs_exist }}"

- name: "[CA_User] Locally check the Signing CA fingerprint on user certs"
  shell:
    ssh-keygen -L -f {{ item.cert }} | \
    fgrep "Signing CA" | sed 's/^[ \t]*//' | cut -d ' ' -f 4
  become: yes           # TEMP
  become_user: drew     # TEMP
  delegate_to: localhost
  register: sshd_user_certs_ca_fpr
  changed_when: false
  with_items: "{{ sshd_user_certs_exist }}"

#- debug: msg="{{ sshd_user_certs_ca_fpr }}"

#- debug:
#    msg:
#      - "sshd_user_certs_exist.item: {{ item[0] }}"
#      - "sshd_user_certs_ca_fpr.results.item.stdout: {{ item[1].stdout }}"
#  with_together:
#    - "{{ sshd_user_certs_exist }}"
#    - "{{ sshd_user_certs_ca_fpr.results }}"

- name: "[CA_User] Add cert_ca_fpr key with certificate fingerprints for existing certs into dictionaries: STEP 1, setting facts"
  set_fact:
    sshd_u_cert_fpr_tmp: "{{ [ item[0] | combine({'cert_ca_fpr': item[1].stdout}) ] }}"
  with_together:
    - "{{ sshd_user_certs_exist }}"
    - "{{ sshd_user_certs_ca_fpr.results }}"
  register: sshd_user_certs_fprs
  no_log: yes

#- debug: msg="{{ sshd_u_cert_fpr_tmp }}"
#- debug: msg="{{ sshd_user_certs_fprs.results }}"

- name: "[CA_User] Add cert_ca_fpr key with certificate fingerprints for existing certs into dictionaries: STEP 2, modifying var"
  set_fact:
    sshd_user_certs_fprs: "{{ sshd_user_certs_fprs.results | map(attribute='ansible_facts.sshd_u_cert_fpr_tmp') | sum(start=[]) }}"

#- debug: msg="{{ sshd_user_certs_fprs }}"

- name: "[CA_User] Locally check the User CA fingerprint only if any user certs already exist"
  shell: ssh-keygen -l -f {{ sshd_user_ca }} | cut -d ' ' -f 2
  become: yes
  delegate_to: localhost
  register: sshd_user_ca_fpr
  changed_when: false

#- debug: msg="{{ sshd_user_ca_fpr }}"

- name: "[CA_User] Generate user certificates by signing the specified user public keys with User CA"
  shell:
    ssh-keygen -s {{ sshd_user_ca }} -n {{ item[0].username }} -V +52w \
    -I {{ sshd_cert_id }}-{{ item[0].username }} {{ item[1].pub_key }}
  delegate_to: localhost
  with_together:
    - "{{ sshd_users }}"
    - "{{ sshd_user_certs_fprs }}"
  when: item[1].cert_exists and item[1].cert_ca_fpr != sshd_user_ca_fpr.stdout or
    not item[1].cert_exists or
    not true in sshd_user_keys_exist.values()
...
