---
# CREATE HOST CA
#========== Process CA keys data start ===========
#- name: "[HostCA] Turn off the host key checking only once for initial key deployment"
#  shell: export ANSIBLE_HOST_KEY_CHECKING=False
#  delegate_to: localhost

- name: "[HostCA] Locally check if {{ sshd_host_ca_key }} key pair already exists"
  stat: path="{{ item }}"
  register: sshd_host_ca_kfiles
  with_items: ["{{ sshd_host_ca_key }}", "{{ sshd_host_ca_key }}.pub"]
  delegate_to: localhost

- name: "[HostCA] Combine Host CA pub and priv keys existence status into dictionary: STEP 1, register dict as results"
  set_fact:
    sshd_host_ca_tmp:
      "{{ sshd_host_ca_tmp|default({})|combine({'file': item.item, 'exists': item.stat.exists}) }}"
  register: sshd_host_ca_k_rslt
  with_items: "{{ sshd_host_ca_kfiles.results }}"
  no_log: yes

- name: "[HostCA] Combine Host CA pub and priv keys existence status into dictionary: STEP 2, modifying var"
  set_fact:
    sshd_host_ca:
      "{{ sshd_host_ca|default({})|combine({ item[0]: item[1].ansible_facts.sshd_host_ca_tmp}) }}"
  with_together:
    - ['priv_key', 'pub_key']
    - "{{ sshd_host_ca_k_rslt.results }}"
  no_log: yes
#=========== Process CA keys data end ============

#========= Perform CA files check start ==========
- name: "[HostCA] Locally generate a Host CA key pair if it doesn't exist"
  shell:
    ssh-keygen -o -a 100 -t {{ sshd_algo }} -f {{ sshd_host_ca_key }} \
    -q -N "{{ sshd_host_ca_pwd }}" #-C "{{ sshd_ca_comment }}"
  become: yes
  register: sshd_host_ca_generated
  delegate_to: localhost
  notify: Generated Host CA info
  when: not sshd_host_ca.priv_key.exists

- name: "[HostCA] Locally retrieve Host CA public key form private if pub key file doesn't exist"
  shell: "ssh-keygen -y -f {{ sshd_host_ca_key }} > {{ sshd_host_ca_key }}.pub"
  delegate_to: localhost
  become: yes
  when:
    - sshd_host_ca.priv_key.exists
    - not sshd_host_ca.pub_key.exists

- name: "[HostCA] Locally register the Host CA keys' fingerprints"
  shell: ssh-keygen -l -E SHA512 -f {{ sshd_host_ca.pub_key.file }} | cut -d ' ' -f 2
  register: sshd_host_ca_fpr
  become: yes
  delegate_to: localhost
  changed_when: false

- name: "[HostCA] Assert that the Host CA fingerprint matches the one specified in defaults/main.yml"
  assert:
    that: sshd_host_ca_fpr.stdout == sshd_host_ca_key_fpr
    msg:
      - "ALERT: Host CA's is fingerprint is wrong."
      - "Host CA fingerprint declared in defaults/main.yml is:"
      - "        {{ sshd_host_ca_key_fpr }}"
      - "Actual fingerprint is:"
      - "        {{ sshd_host_ca_fpr.stdout }}"
      - "Please make sure you specify the right HostCA file and it's fingerprint at defaults/main.yml"
      - "ALTERNATIVELY, remove the old incorrect CA keypair from your local machine so the new secrue CA will be created:"
      - "        rm -f {{ sshd_host_ca_key }} {{ sshd_host_ca_key }}.pub"
      - "MAKE SURE YOU MAKE A BACKUP BEFORE REMOVING OLD CA"
  when: not sshd_host_ca_generated.changed
#========== Perform CA files check end ===========

#======= Locally modify known_hosts start ========
- name: "[HostCA] Locally register the Host CA public key content using 'cat' for furher usage in known_hosts"
  shell: "cat {{ sshd_host_ca.pub_key.file }}"
  register: sshd_host_ca_pub
  changed_when: false
  delegate_to: localhost

# This will cleanup the known_host on our ssh client machine.
# It is important in case the HostCA private key was spoofed while it's private key is correct.
# In that case the fingerprint will be shown as correct, and there will be no error,
# while the host pubkey will still be in our known_hosts and won't warn us about wrong host key fingerprint
- name: "[HostCA] Locally copy Host CA's public key to known_hosts file"
  template:
    src: known_hosts.j2
    dest: ~/.ssh/known_hosts
    owner: "{{ ansible_user_id }}"
    group: staff
    #group: "{{ 'staff' if ansible_os_family == 'Darwin' else ansible_user_id }}"
    mode: 0644
  delegate_to: localhost
#======== Locally modify known_hosts end =========

# ISSUE HOST CERTIFICATE
#========== Process host keys data start =========
# remote checks:
- name: "[HostCA] Check if host keys and cert exist"
  stat: path="{{ item }}"
  register: sshd_host_keys
  with_items:
    - "{{ sshd_cfg_dir }}/ssh_host_{{ sshd_algo }}_key"
    - "{{ sshd_cfg_dir }}/ssh_host_{{ sshd_algo }}_key.pub"
    - "{{ sshd_cfg_dir }}/ssh_host_{{ sshd_algo }}_key-cert.pub"

# data processing:
- name: "[HostCA] Combine host pub, priv keys and cert existence status into dictionary: STEP 1, register dict as results"
  set_fact:
    sshd_host_k_tmp:
      "{{ sshd_host_k_tmp|default({})|combine({'file': item.item,
        'exists': item.stat.exists}) }}"
  register: sshd_host_k_rslt
  with_items: "{{ sshd_host_keys.results }}"
  no_log: yes

- name: "[HostCA] Combine Host CA pub, priv keys and cert existence status into dictionary: STEP 2, modifying var"
  set_fact:
    sshd_host_k:
      "{{ sshd_host_k|default({})|combine({ item[0]: item[1].ansible_facts.sshd_host_k_tmp}) }}"
  with_together:
    - ['priv_key', 'pub_key', 'cert']
    - "{{ sshd_host_k_rslt.results }}"
  no_log: yes
#========== Process host keys data end ===========

#========= Perform host keys check start =========
- name: "[HostCA] Check the host cert's Signing CA fingerprint when host private key and cert exist"
  shell:
    ssh-keygen -L -E SHA512 -f {{ sshd_cfg_dir }}/ssh_host_{{ sshd_algo }}_key-cert.pub | \
    fgrep "Signing CA" | sed 's/^[ \t]*//' | cut -d ' ' -f 4
  become: yes
  register: sshd_host_cert_ca_fpr
  changed_when: false
  when:
    - sshd_host_k.priv_key.exists
    - sshd_host_k.cert.exists

- name: "[HostCA] Retrieve host public key form private if pub key file doesn't exist"
  shell: "ssh-keygen -y -f {{ sshd_host_k.priv_key.file }} > {{ sshd_host_k.pub_key.file }}"
  become: yes
  when:
    - sshd_host_k.priv_key.exists
    - not sshd_host_k.pub_key.exists

- name: "[HostCA] Locally generate host key pair if there is no correct host certificate already on the system"
  shell: echo 'y' | ssh-keygen -o -a 100 -t {{ sshd_algo }} -q -N "" -f /tmp/ssh_host_{{ sshd_algo }}_key
  delegate_to: localhost
  when: not sshd_host_k.priv_key.exists

- name: "[HostCA] Locally sign the host key and generate certificate if cert doesn't exist or it's fingerprint is wrong"
  shell: echo 'y' | ssh-keygen -s {{ sshd_host_ca_key }} -h -V +52w -I {{ sshd_cert_id }}-host /tmp/ssh_host_{{ sshd_algo }}_key.pub
  register: sshd_eventlog
  become: yes
  delegate_to: localhost
  when: not sshd_host_k.cert.exists or
        sshd_host_cert_ca_fpr.stdout != sshd_host_ca_fpr.stdout

- name: "[HostCA] Locally log the key signing event"
  shell: echo {{ sshd_eventlog }} >> {{ sshd_certlogger }}
  delegate_to: localhost
  when: sshd_eventlog.changed

- name: "[HostCA] Copy host public key and host certificate to a host with correct permissions - 0644"
  copy: src="{{ item }}" dest="{{ sshd_cfg_dir }}" mode=0644
  become: yes
  with_items:
    - "/tmp/ssh_host_{{ sshd_algo }}_key.pub"
    - "/tmp/ssh_host_{{ sshd_algo }}_key-cert.pub"

- name: "[HostCA] Copy host private key with correct permissions - 0600"
  copy: src="/tmp/ssh_host_{{ sshd_algo }}_key" dest="{{ sshd_cfg_dir }}" mode=0600
  become: yes
#========= Perform host keys check end ===========
...
