---
# CREATE USER CA
- name: "[CA_User] Locally check if {{ sshd_user_ca }} key pair already exists"
  stat: path="{{ item }}"
  register: sshd_user_ca_keys
  with_items:
    - "{{ sshd_user_ca }}"
    - "{{ sshd_user_ca }}.pub"
  delegate_to: localhost

- name: "[CA_User] Combine the results into dictionary with following structure: {<UserCA_key_file> : <stat.exists>"
  set_fact:
    # https://stackoverflow.com/questions/35605603/using-ansible-set-fact-to-create-a-dictionary-from-register-results
    # FLATTENING THE RESULTS AND COMBINING THEM INTO DICTIONARY WITH SPECIFIED KEY:VALUE STRUCTURE:
    sshd_user_ca_keys_exist: "{{ sshd_user_ca_keys_exist|default({}) | combine( {item.item: item.stat.exists} ) }}"
  with_items: "{{ sshd_user_ca_keys.results }}"
  no_log: yes

- name: "[CA_User] Locally cleanup old broken User CA key files"
  file:
    path: "{{ item.key }}"
    state: absent
  become: yes
  with_dict: "{{ sshd_user_ca_keys_exist }}"
  delegate_to: localhost
  when:
    - false in sshd_user_ca_keys_exist.values()  # Cleanup only when key pair is broken
    - item.value # Make it efficient: remove the key which exists, skip task for key which doesn't exist

- name: "[CA_User] Locally reate a User CA key"
  shell: ssh-keygen -o -a 100 -t {{ sshd_algo }} -f {{ sshd_user_ca }} -q -N {{ sshd_user_ca_pwd }}
  delegate_to: localhost
  register: sshd_user_ca_created
  when: false in sshd_user_ca_keys_exist.values()

- name: "[CA_User] Copy User CA public key to sshd server"
  copy:
    src: "{{ sshd_user_ca }}.pub"
    dest: "{{ sshd_cfg_dir }}"
    mode: 0644
    owner: root
    group: "{{ 'wheel' if ansible_os_family == 'Darwin' else 'root' }}"
  become: yes
...
